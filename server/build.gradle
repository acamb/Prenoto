plugins {
    id "groovy"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "application"
}

version "1.3"
group "ac.sanbernardo.prenoto"

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    compileOnly(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    compileOnly("io.micronaut:micronaut-inject-groovy")
    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut.groovy:micronaut-runtime-groovy")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.sql:micronaut-hibernate-jpa")
    implementation('org.apache.logging.log4j:log4j-core:2.18.0')
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    compileOnly("io.micronaut.data:micronaut-data-processor")
    runtimeOnly('org.apache.logging.log4j:log4j-api:2.18.0')
    runtimeOnly('org.apache.logging.log4j:log4j-slf4j-impl:2.18.0')
    runtimeOnly("com.h2database:h2")
    implementation("io.micronaut.reactor:micronaut-reactor")
    // https://mvnrepository.com/artifact/commons-logging/commons-logging
    implementation group: 'commons-logging', name: 'commons-logging', version: '1.1.1'

    compileOnly "io.micronaut.security:micronaut-security-annotations"
    implementation "io.micronaut.security:micronaut-security-jwt"
    implementation "org.springframework.security:spring-security-crypto:${springSecurityCryptoVersion}"
    testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("io.micronaut:micronaut-inject-groovy")
    testImplementation("io.micronaut.test:micronaut-test-spock")
    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    implementation('org.codehaus.groovy:groovy-all:3.0.12')
    // https://mvnrepository.com/artifact/org.mindrot/jbcrypt
    implementation group: 'org.mindrot', name: 'jbcrypt', version: '0.4'
}

test.classpath += configurations.developmentOnly

mainClassName = "ac.sanbernardo.prenoto.Application"

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.toVersion('17')
    targetCompatibility = JavaVersion.toVersion('17')
}

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
            'micronaut.io.watch.restart':'true',
            'micronaut.io.watch.enabled':'true',
            "micronaut.io.watch.paths":"src/main"
        )
    }
}

def webappDir = "$projectDir/../client"
task buildFrontend(type:Exec) {
    workingDir "$webappDir"
    commandLine "npm", "run", "package"
}


processResources{
    if (gradle.startParameter.taskNames.contains("assemble")) {
        dependsOn "buildFrontend"
    }
    else{
        println "skipping frontend build"
    }
}


